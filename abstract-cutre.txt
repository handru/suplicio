ABSTRACT
This thesis presents the optimization of a scientific application taken from the field of Fluid Dynamics, a discipline commonly related to High Performance Computing, developed between the years 1999 and 2005. The code is writen in Fortran and whas executed in a resource-limited  hardware platform. The application also belongs to the field of Legacy Software, programs that remains valid after ten, fifthteen or more years. They are usually big, complex programs, performing crucial tasks in their owner organization.  Once a program is found to yield correct results, its code is seldom modified, especially in scientific areas, where compute-intensive problems often belong. Due to the passing of time, legacy applications eventually face environmental changes which they must account for, at which time they must be modernized, or their end of life has to be considered. Modernizing a legacy system entails a work of a variable size, depending on the system's complexity and the new proposed environment. Modernizing a legacy application can be considered as an optimization process, only for a different platform than that it was built for.

The application in this study analyzes the behavior of the horizontal axis wind turbine and is part of a PhD work presented at the University of Buenos Aires, which in its first part analyzes the inviscid flow around the turbine vane. Through the panel method, the flow is modeled, and in particular the application calculates the velocities induced at one point of the panel for each of the panels.

The process of optimization of the application passes in the first instance by a serial optimization and then by a parallel optimization. In this way it uses resources that were not contemplated in its original design, such as more memory, more processing units and parallelization directives. The implementation of multiprocessing is done with the parallel programming interface OpenMP, which provides a portable and scalable model for the development of parallel applications of shared memory. The OpenMP interface is used to directly apply multi-threads to shared memory.

This work shows the optimization process with the different versions of the application, the original version, unmodified, the second version, which is an optimization of the serial code to take advantage of the RAM instead of writing to disk, and lastly the version with parallel optimization, where OpenMP is used in the parts of the code selected for this purpose. Time measurements are taken from each version of the application on selected test equipment, taking the problem sizes provided with the application which are given by the number of panels on which to calculate the speeds. It mainly analyzes the speed-up factor of the optimizations and also the use of the resources of each version.